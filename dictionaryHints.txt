"""
only immutable data type can be used as the key
- "immutable data" - which means that not possible to use the list or dictionary as the key
in case the user will try to add the list type as the key he could see the below error:
>>> dic = { [1,2,3]:"abc"}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list objects are unhashable

but it is possible to use type data as 'tuple'
a tuple is a sequence of immutable Python objects
tuple is almost like the list but the main difference is how we write it
- the list is []
- the tuple is ()

>>> dic = { (1,2,3):"abc", 3.1415:"abc"}
>>> dic
{3.1415: 'abc', (1, 2, 3): 'abc'}

"""

# -*- coding: iso-8859-1 -*-

en_de = {"red" : "rot", "green" : "grÃ¼n", "blue" : "blau", "yellow":"gelb"}
de_fr = {"rot" : "rouge", "grÃ¼n" : "vert", "blau" : "bleu", "gelb":"jaune"}

#below I can see that the dictionaries was created by adding the key as string
# en_de and as the value was add its correspond dictinaries

dictionaries = {"en_de" : en_de, "de_fr" : de_fr }

# poniżej jest ciekawa konstrukcja, jest odwołanie do klucza z dicitonaries którym jest 'de_fr' a które 
# następnie pobierany jest klucz 'blau' i na ekran wydrukowana jest wartość ukryta pod tym kluczem
print dictionaries["de_fr"]["blau"]

